import mysql.connector
from datetime import datetime, timedelta

# ‚öôÔ∏è C·∫•u h√¨nh k·∫øt n·ªëi MySQL
conn = mysql.connector.connect(
    host='localhost',
    user='root',
    password='taolao',
    database='library_db'
)
cursor = conn.cursor()


def check_book_availability(book_id):
    cursor.execute("SELECT quantity FROM books WHERE book_id = %s", (book_id,))
    result = cursor.fetchone()
    return result and result[0] > 0


def borrow_book(user_id, book_id):
    cursor.execute("SELECT title FROM books WHERE book_id = %s", (book_id,))
    book = cursor.fetchone()
    if not book:
        print("‚ùå S√°ch kh√¥ng t·ªìn t·∫°i.")
        return

    if not check_book_availability(book_id):
        print("‚ùå S√°ch ƒë√£ h·∫øt.")
        return

    borrow_date = datetime.today().date()
    due_date = borrow_date + timedelta(days=7)

    cursor.execute("""
        INSERT INTO transactions (user_id, book_id, borrow_date, due_date, status)
        VALUES (%s, %s, %s, %s, 'borrowed')
    """, (user_id, book_id, borrow_date, due_date))

    cursor.execute("UPDATE books SET quantity = quantity - 1 WHERE book_id = %s", (book_id,))
    conn.commit()
    print(f"‚úÖ M∆∞·ª£n s√°ch th√†nh c√¥ng: {book[0]} (H·∫°n tr·∫£: {due_date})")


def return_book(transaction_id):
    return_date = datetime.today().date()

    cursor.execute("SELECT book_id, due_date FROM transactions WHERE transaction_id = %s", (transaction_id,))
    result = cursor.fetchone()

    if not result:
        print("‚ùå Giao d·ªãch kh√¥ng t·ªìn t·∫°i.")
        return

    book_id, due_date = result
    status = 'returned' if return_date <= due_date else 'overdue'

    cursor.execute("""
        UPDATE transactions
        SET return_date = %s, status = %s
        WHERE transaction_id = %s
    """, (return_date, status, transaction_id))

    cursor.execute("UPDATE books SET quantity = quantity + 1 WHERE book_id = %s", (book_id,))
    conn.commit()
    print(f"‚úÖ Tr·∫£ s√°ch th√†nh c√¥ng. Tr·∫°ng th√°i: {status}")


def get_top_borrowed_books(limit=5):
    cursor.execute("""
        SELECT b.title, COUNT(*) AS times_borrowed
        FROM transactions t
        JOIN books b ON t.book_id = b.book_id
        GROUP BY b.book_id
        ORDER BY times_borrowed DESC
        LIMIT %s
    """, (limit,))

    results = cursor.fetchall()
    if not results:
        print("‚ùó Kh√¥ng c√≥ d·ªØ li·ªáu m∆∞·ª£n s√°ch.")
        return

    print("üìä S√°ch ƒë∆∞·ª£c m∆∞·ª£n nhi·ªÅu nh·∫•t:")
    for title, count in results:
        print(f"- {title} ({count} l·∫ßn)")


def main_menu():
    while True:
        print("\n===== MENU QU·∫¢N L√ù M∆Ø·ª¢N/TR·∫¢ S√ÅCH =====")
        print("1. M∆∞·ª£n s√°ch")
        print("2. Tr·∫£ s√°ch")
        print("3. Th·ªëng k√™ s√°ch m∆∞·ª£n nhi·ªÅu nh·∫•t")
        print("0. Tho√°t")
        choice = input("üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ")

        if choice == '1':
            try:
                user_id = int(input("Nh·∫≠p ID ng∆∞·ªùi d√πng: "))
                book_id = int(input("Nh·∫≠p ID s√°ch: "))
                borrow_book(user_id, book_id)
            except:
                print("‚ö†Ô∏è D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá.")
        elif choice == '2':
            try:
                transaction_id = int(input("Nh·∫≠p ID giao d·ªãch: "))
                return_book(transaction_id)
            except:
                print("‚ö†Ô∏è D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá.")
        elif choice == '3':
            get_top_borrowed_books()
        elif choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")


if __name__ == "__main__":
    main_menu()
